apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: quiz
stringData:
  REDISHOST: redis:6379
  REDISPASSWORD: myredispassword
  ADMINPASSWORD: myquizpassword
  SESSIONTIMEOUT: '3600'
  TZ: Asia/Singapore
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
  sessionAffinity: None
  type: ClusterIP
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
    spec:
      containers:
      - image: redis:6
        name: redis
        command:
        - /bin/bash
        - "-c"
        - "redis-server --requirepass ${REDIS_PASSWORD}"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: REDISPASSWORD
              name: quiz
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 6379
          timeoutSeconds: 1
        ports:
        - containerPort: 6379
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -i
            - -c
            - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: 512Mi
        volumeMounts:
        - mountPath: /data
          name: redis-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: quiz
  name: quiz
spec:
  replicas: 1
  selector:
    matchLabels:
      app: quiz
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: quiz
    spec:
      containers:
      - image: ghcr.io/kwkoo/go-quiz:latest
        name: go-quiz
        imagePullPolicy: Always
        envFrom:
        - secretRef:
            name: quiz
        ports:
        - containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 10
        resources: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: quiz
  name: quiz
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30080
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: quiz
  sessionAffinity: None
  type: NodePort
status: {}
